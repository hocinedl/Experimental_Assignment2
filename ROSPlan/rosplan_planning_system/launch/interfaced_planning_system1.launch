<?xml version="1.0"?>
<launch>

  <!-- :::arguments::: -->

  <!-- pddl domain path -->
  <arg name="domain_path"  default="$(find rosplan_planning_system)/common/domain1.pddl" />

  <!-- load a particular initial state into KB at startup (optional) -->
  <arg name="problem_path" default="$(find rosplan_planning_system)/common/problem1.pddl" />

  <!-- automatically generated pddl problem will be created here -->
  <arg name="autom_gen_problem_path" default="$(find rosplan_planning_system)/common/gen_problem1.pddl" />

  <!-- planner will produce output plan and write to this location -->
  <arg name="data_path" default="$(find rosplan_planning_system)/common/results/" />

  <!-- use problem.pddl or receive problem from topic -->
  <arg name="use_problem_topic" default="true" />

  <!-- command to run the planner -->
  <arg name="planner_command" default="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />

  <!-- interface to the planning system -->
  <arg name="planner_interface" default="popf_planner_interface" />

  <!-- :::end of arguments:::  <node name="go_to_point" pkg="motion_plan" type="go_to_point_action.py" respawn="false"/> -->
  
  
  

  
  
  <!-- knowledge base -->
  <node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
    <param name="domain_path" value="$(arg domain_path)" />
    <param name="problem_path" value="$(arg problem_path)" />
    <!-- conditional planning flags -->
    <param name="use_unknowns" value="false" />
  </node>

  <!-- problem generation -->
  <include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="domain_path"      value="$(arg domain_path)" />
    <!-- problem_path: pddl problem will be automatically generated and placed in this location -->
    <arg name="problem_path"     value="$(arg autom_gen_problem_path)" />
    <arg name="problem_topic"    value="problem_instance" />
  </include>

  <!-- planner interface -->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"    value="$(arg use_problem_topic)" />
    <arg name="problem_topic"        value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"        value="planner_output" />
    <arg name="domain_path"          value="$(arg domain_path)" />
    <arg name="problem_path"         value="$(arg autom_gen_problem_path)" />
    <arg name="data_path"            value="$(arg data_path)" />
    <arg name="planner_command"      value="$(arg planner_command)" />
    <arg name="planner_interface"    value="$(arg planner_interface)" />
  </include>

  <!-- plan parsing -->
  <include file="$(find rosplan_planning_system)/launch/includes/parsing_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="planner_topic"    value="/rosplan_planner_interface/planner_output" />
    <arg name="plan_topic"       value="complete_plan" />
  </include>

  <!-- plan dispatch -->
  <include file="$(find rosplan_planning_system)/launch/includes/dispatch_interface.launch">
    <arg name="knowledge_base"           value="rosplan_knowledge_base" />
    <arg name="plan_topic"               value="/rosplan_parsing_interface/complete_plan" />
    <arg name="action_dispatch_topic"    value="action_dispatch" />
    <arg name="action_feedback_topic"    value="action_feedback" />
  </include>
  
  <!-- simulated actions -->
  <!--include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
	<arg name="pddl_action_name" value="move"  <node name="go_to_point" pkg="motion_plan" type="go_to_point_action.py" respawn="false"/> />
	
	  <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
	<arg name="pddl_action_name" value="detect" />
	<arg name="action_duration" value="3.0" />
	
	  <node name="rosplan_interface_move" pkg="rosplan_interface" type="myaction"
	respawn="false" output="screen">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="move" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	<param name="action_duration" value="30.0" />
  </node>
  
  <node name="rosplan_interface_detect" pkg="rosplan_interface" type="detectaction"
	respawn="false" output="screen">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="detect" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	<param name="action_duration" value="30.0" />
  </node>
  

  
  </include>
  
   </include--> 
   
   <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
	<arg name="pddl_action_name" value="move" />
	
  </include>
  
  <include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
	<arg name="pddl_action_name" value="detect" />
	
  </include>
  


  


  

 
</launch>
